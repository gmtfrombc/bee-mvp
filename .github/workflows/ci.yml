name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      # Test database credentials (not sensitive, but keeps GitGuardian happy)
      TEST_DB_PASSWORD: postgres

    steps:
      - uses: actions/checkout@v4

      # ---------- Component Size Governance ----------
      - name: Component Size Compliance Check
        run: |
          echo "üîç Checking component size compliance..."
          chmod +x scripts/check_component_sizes.sh
          ./scripts/check_component_sizes.sh
        working-directory: .
        env:
          REFACTOR_MODE: true  # Sprint 0: Notification system refactor in progress

      # ---------- Flutter ----------
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      
      # Setup CI-safe Firebase options for testing
      - name: Setup CI Firebase Configuration
        run: |
          cd app
          echo "üîß Setting up CI-safe Firebase configuration..."
          cp lib/firebase_options_ci.dart lib/firebase_options.dart
          echo "‚úÖ Firebase options configured for CI environment"
      
      - run: |
          cd app
          flutter pub get
          flutter test

      # ---------- Terraform ----------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Validate
        working-directory: infra
        run: |
          terraform init -backend=false
          terraform validate

      # ---------- Database RLS Tests ----------
      - name: Setup PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '14'
          postgresql db: 'test'
          postgresql user: 'postgres'
          postgresql password: ${{ env.TEST_DB_PASSWORD }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-minimal.txt

      # ---------- Python Code Quality ----------
      - name: Check Python code formatting with Black
        run: |
          black --check tests/ --diff

      - name: Lint Python code with Ruff
        run: |
          ruff check tests/ --output-format=github

      - name: Setup test database schema
        run: |
          PGPASSWORD=${{ env.TEST_DB_PASSWORD }} psql -h localhost -U postgres -d test -c "
          -- Create engagement_events table for testing
          CREATE TABLE IF NOT EXISTS engagement_events (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL,
            timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            event_type TEXT NOT NULL,
            value JSONB DEFAULT '{}'::jsonb,
            is_deleted BOOLEAN DEFAULT FALSE
          );
          
          -- Enable RLS
          ALTER TABLE engagement_events ENABLE ROW LEVEL SECURITY;
          
          -- Create RLS policies
          CREATE POLICY \"Users can view own events\" ON engagement_events 
          FOR SELECT USING (current_setting('request.jwt.claims', true)::jsonb->>'sub' = user_id::text);
          
          CREATE POLICY \"Users can insert own events\" ON engagement_events 
          FOR INSERT WITH CHECK (current_setting('request.jwt.claims', true)::jsonb->>'sub' = user_id::text);
          "

      - name: Run RLS Tests
        run: |
          pytest tests/db/test_rls.py -v

      # ---------- Component Size Audit Report ---------- 
      - name: Generate Component Size Audit Report
        if: github.event_name == 'pull_request'
        run: |
          chmod +x scripts/component_size_audit.sh
          ./scripts/component_size_audit.sh --output-file component_size_pr_report.md
        
      - name: Upload Component Size Report
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: component-size-report
          path: component_size_pr_report.md
          retention-days: 30
          
      - name: Comment Component Size Report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the component size report
            let report = '';
            try {
              report = fs.readFileSync('component_size_pr_report.md', 'utf8');
            } catch (error) {
              console.log('No component size report found');
              return;
            }
            
            // Truncate report if too long for comment
            const maxLength = 65000; // GitHub comment limit
            if (report.length > maxLength) {
              report = report.substring(0, maxLength - 200) + '\n\n... (Report truncated. See full report in artifacts)';
            }
            
            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('BEE Component Size Audit Report')
            );
            
            const commentBody = `## üîç BEE Component Size Audit Report
            
            ${report}
            
            ---
            *This report is automatically generated by the component size governance system.*
            *For more details, see: \`scripts/check_component_sizes.sh\`*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
