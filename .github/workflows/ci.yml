name: Backend & Integration Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'tests/**'
      - 'infra/**' 
      - 'supabase/**'
      - 'scripts/**'
      - 'app/lib/**'
      - '.github/workflows/ci.yml'
  pull_request:
    paths:
      - 'tests/**'
      - 'infra/**'
      - 'supabase/**' 
      - 'scripts/**'
      - 'app/lib/**'
      - '.github/workflows/ci.yml'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    container: ghcr.io/gmtfrombc/ci-base:2025-07-12
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ports: ["54322:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      # Test database credentials (not sensitive, but keeps GitGuardian happy)
      TEST_DB_PASSWORD: postgres
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_SECRET }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      # Default for local VS Code actionlint and GitHub runner. Overridden by `act` when you pass `-e ACT=true`.
      ACT: "false"
      SKIP_TERRAFORM: "false"
      FLUTTER_VERSION: '3.32.6'
      NODE_VERSION: '20.9.0'

    steps:
      - uses: actions/checkout@v4

      # ---------- Node Toolchain ----------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '${{ env.NODE_VERSION }}'

      # ---------- Secret Scanner ----------
      - name: Secret Scan with Gitleaks
        if: ${{ env.ACT != 'true' }}
        run: |
          chmod +x scripts/check_secrets.sh
          ./scripts/check_secrets.sh
        working-directory: .

      # ---------- Component Size Governance ----------
      - name: Component Size Compliance Check
        run: |
          echo "üîç Checking component size compliance..."
          chmod +x scripts/check_component_sizes.sh
          ./scripts/check_component_sizes.sh
        working-directory: .
        env:
          REFACTOR_MODE: true  # Sprint 0: Notification system refactor in progress

      # ---------- Flutter Basic Validation ----------
      # actionlint-disable-next-line expression-env
      - name: Skip Flutter setup (preinstalled)
        if: ${{ env.ACT != 'true' }}
        run: echo "Flutter SDK preinstalled in container ‚Äì skipping setup."

      # Create environment file using new .env.example approach
      # actionlint-disable-next-line expression-env
      - name: Setup Flutter Environment
        if: ${{ env.ACT != 'true' }}
        working-directory: ./app
        run: |
          echo "üîß Setting up Flutter environment for basic validation..."
          # Copy existing .env.example to .env for CI
          cp .env.example .env
          echo "‚úÖ Environment configured from .env.example"

      # FIREBASE OPTIONS: Create CI-safe firebase_options.dart
      # actionlint-disable-next-line expression-env
      - name: Create Firebase Options Configuration
        if: ${{ env.ACT != 'true' }}
        working-directory: ./app
        run: |
          echo "üîß Creating CI-safe Firebase options configuration"
          cp lib/firebase_options_ci.dart lib/firebase_options.dart
          echo "‚úÖ CI-safe Firebase options configuration created"

      # actionlint-disable-next-line expression-env
      - name: Flutter Dependencies & Basic Validation
        if: ${{ env.ACT != 'true' }}
        working-directory: ./app
        run: |
          flutter pub get
          flutter analyze --fatal-infos --fatal-warnings
          echo "‚úÖ Flutter basic validation complete"

      # ---------- Terraform ----------
      - name: Setup Terraform
        if: ${{ env.SKIP_TERRAFORM != 'true' }}
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Validate
        if: ${{ env.SKIP_TERRAFORM != 'true' }}
        working-directory: infra
        run: |
          terraform init -backend=false
          terraform validate

      # ---------- Database RLS Tests ----------
      # actionlint-disable-next-line expression-env
      - name: Install Python dependencies
        run: |
          pip --version  # show current (24.0) Debian pip
          pip install --break-system-packages -r tests/requirements-minimal.txt

      # ---------- Python Code Quality ----------
      - name: Check Python code formatting with Black
        run: |
          black --check tests/ --diff

      - name: Lint Python code with Ruff
        run: |
          ruff check tests/ --output-format=github

      # ---------- SQL Linting ----------
      - name: Lint SQL migrations with SQLFluff
        continue-on-error: true
        run: |
          # SQLFluff ‚â•2.3 replaces the deprecated "github" formatter with
          # "github-annotation" (and "github-annotation-native"). We pin
          # sqlfluff==2.3.5 in tests/requirements-minimal.txt, so we must
          # use the new formatter to avoid a runtime CLI error.
          sqlfluff lint supabase/migrations --format github-annotation

      # actionlint-disable-next-line expression-env
      - name: Setup test database schema
        if: ${{ env.ACT != 'true' }}
        run: |
          PGPASSWORD=${{ env.TEST_DB_PASSWORD }} psql -h postgres -p 5432 -U postgres -d test -c "
          -- Create auth schema and users table to simulate Supabase auth
          CREATE SCHEMA IF NOT EXISTS auth;
          
          -- Ensure pgcrypto extension for gen_random_uuid()
          CREATE EXTENSION IF NOT EXISTS pgcrypto;
          
          -- Create auth.users table (simplified version for testing)
          CREATE TABLE IF NOT EXISTS auth.users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email TEXT UNIQUE,
            encrypted_password TEXT,
            email_confirmed_at TIMESTAMP WITH TIME ZONE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
          
          -- Create auth.uid() function to simulate Supabase auth
           CREATE OR REPLACE FUNCTION auth.uid() RETURNS UUID AS \$function\$
           BEGIN
             RETURN NULLIF(
               current_setting('request.jwt.claims', true)::jsonb->>'sub',
               ''
             )::UUID;
           EXCEPTION
             WHEN others THEN
               RETURN NULL;
           END;
           \$function\$ LANGUAGE plpgsql SECURITY DEFINER;

          -- Helper to set JWT claims for non-superusers
          CREATE OR REPLACE FUNCTION auth.set_uid(p_uid UUID) RETURNS VOID AS \$setuid\$
          BEGIN
            PERFORM set_config('request.jwt.claims', json_build_object('sub', p_uid)::text, false);
          END;
          \$setuid\$ LANGUAGE plpgsql SECURITY DEFINER;

          GRANT EXECUTE ON FUNCTION auth.set_uid(UUID) TO PUBLIC;
          
          -- Create engagement_events table matching production schema
          CREATE TABLE IF NOT EXISTS engagement_events (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            event_type TEXT NOT NULL,
            value JSONB DEFAULT '{}'::jsonb,
            is_deleted BOOLEAN DEFAULT FALSE
          );
          
          -- ============================================================
          -- üõ°Ô∏è  UNIVERSAL AUDIT SCHEMA (must exist before triggers)   
          -- ============================================================
          CREATE SCHEMA IF NOT EXISTS _shared;

          -- Create audit log table (idempotent)
          CREATE TABLE IF NOT EXISTS _shared.audit_log (
            id BIGSERIAL PRIMARY KEY,
            table_name TEXT,
            action TEXT,
            old_row JSONB,
            new_row JSONB,
            changed_at TIMESTAMPTZ DEFAULT NOW()
          );

          -- Create or replace audit() trigger function
          CREATE OR REPLACE FUNCTION _shared.audit()
          RETURNS TRIGGER
          LANGUAGE plpgsql
          SECURITY DEFINER
          SET search_path = public, pg_temp
          AS \$audit\$
          BEGIN
            INSERT INTO _shared.audit_log(table_name, action, old_row, new_row)
            VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW));
            RETURN COALESCE(NEW, OLD);
          END;
          \$audit\$;

          -- ============================================================
          -- ‚öôÔ∏è  PROFILES TABLE (Auth Backend v1)                        
          -- ============================================================
          -- Mirrors Supabase migration in milestone M1.6.1
          CREATE TABLE IF NOT EXISTS public.profiles (
            id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
            onboarding_complete BOOLEAN DEFAULT FALSE,
            updated_at TIMESTAMPTZ DEFAULT NOW()
          );
          
          -- Enable RLS & define owner-only policies
          ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
          
          -- Drop existing policies to keep idempotent
          DROP POLICY IF EXISTS \"Users can view own profiles\" ON public.profiles;
          DROP POLICY IF EXISTS \"Users can insert own profiles\" ON public.profiles;
          
          CREATE POLICY \"Users can view own profiles\"
            ON public.profiles
            FOR SELECT
            USING (auth.uid() = id);
          
          CREATE POLICY \"Users can insert own profiles\"
            ON public.profiles
            FOR INSERT
            WITH CHECK (auth.uid() = id);
          
          -- Create test users for RLS validation (must exist before inserting profiles)
          INSERT INTO auth.users (id, email, encrypted_password, email_confirmed_at, created_at, updated_at)
          VALUES 
            ('11111111-1111-1111-1111-111111111111', 'test-user-a@example.com', 'encrypted', NOW(), NOW(), NOW()),
            ('22222222-2222-2222-2222-222222222222', 'test-user-b@example.com', 'encrypted', NOW(), NOW(), NOW())
          ON CONFLICT (id) DO NOTHING;
          
          -- Seed one profile row for automated tests (must run after table exists)
          INSERT INTO public.profiles (id, onboarding_complete)
          VALUES ('11111111-1111-1111-1111-111111111111', false)
          ON CONFLICT (id) DO NOTHING;
          
          -- Attach universal audit trigger (_shared.audit) AFTER table & seed row
          CREATE TRIGGER profiles_audit_trigger
            AFTER INSERT OR UPDATE OR DELETE ON public.profiles
            FOR EACH ROW EXECUTE FUNCTION _shared.audit();
          
          -- Add performance indexes
          CREATE INDEX IF NOT EXISTS idx_engagement_events_user_timestamp 
          ON engagement_events(user_id, timestamp DESC);
          
          CREATE INDEX IF NOT EXISTS idx_engagement_events_value 
          ON engagement_events USING GIN(value);
          
          CREATE INDEX IF NOT EXISTS idx_engagement_events_type 
          ON engagement_events(event_type);
          
          -- Add constraints with PostgreSQL 14 compatible syntax
          DO \$do\$ 
          BEGIN
              IF NOT EXISTS (
                  SELECT 1 FROM information_schema.table_constraints 
                  WHERE constraint_name = 'check_event_type_not_empty'
                  AND table_name = 'engagement_events'
              ) THEN
                  ALTER TABLE engagement_events 
                  ADD CONSTRAINT check_event_type_not_empty 
                  CHECK (event_type != '' AND LENGTH(TRIM(event_type)) > 0);
              END IF;
          END \$do\$;
          
          DO \$do2\$ 
          BEGIN
              IF NOT EXISTS (
                  SELECT 1 FROM information_schema.table_constraints 
                  WHERE constraint_name = 'check_timestamp_not_future'
                  AND table_name = 'engagement_events'
              ) THEN
                  ALTER TABLE engagement_events 
                  ADD CONSTRAINT check_timestamp_not_future 
                  CHECK (timestamp <= NOW() + INTERVAL '1 minute');
              END IF;
          END \$do2\$;

          -- Enable RLS (MUST match production)
          ALTER TABLE engagement_events ENABLE ROW LEVEL SECURITY;
          
          -- Drop any existing policies to ensure clean slate
          DROP POLICY IF EXISTS \"Users can view own events\" ON engagement_events;
          DROP POLICY IF EXISTS \"Users can insert own events\" ON engagement_events;
          DROP POLICY IF EXISTS \"Service role can insert any events\" ON engagement_events;
          
          -- Create RLS policies EXACTLY matching production schema
          CREATE POLICY \"Users can view own events\" 
          ON engagement_events 
          FOR SELECT 
          USING (auth.uid() = user_id);
          
          CREATE POLICY \"Users can insert own events\" 
          ON engagement_events 
          FOR INSERT 
          WITH CHECK (auth.uid() = user_id);
          
          -- üîß RLS SECURITY FIX: Check if postgres user is superuser
          -- If postgres is a superuser, create a non-superuser role for RLS testing
          DO \$rls_fix\$
          BEGIN
              -- Check if postgres user is a superuser
              IF EXISTS (SELECT 1 FROM pg_authid WHERE rolname = 'postgres' AND rolsuper = true) THEN
                  -- Create non-superuser role for RLS testing
                  IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'rls_test_user') THEN
                      CREATE ROLE rls_test_user WITH LOGIN NOSUPERUSER;
                      ALTER ROLE rls_test_user PASSWORD 'postgres';
                  END IF;
                  
                  -- Grant necessary permissions
                  GRANT USAGE ON SCHEMA auth TO rls_test_user;
                  GRANT USAGE ON SCHEMA public TO rls_test_user;
                  GRANT SELECT, INSERT, UPDATE, DELETE ON auth.users TO rls_test_user;
                  GRANT SELECT, INSERT, UPDATE, DELETE ON engagement_events TO rls_test_user;
                  GRANT SELECT, INSERT, UPDATE, DELETE ON public.profiles TO rls_test_user;
                  GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO rls_test_user;
                  GRANT USAGE ON ALL SEQUENCES IN SCHEMA auth TO rls_test_user;
                  
                  RAISE NOTICE 'Created rls_test_user for proper RLS testing (postgres is superuser)';
              ELSE
                  RAISE NOTICE 'postgres user is not a superuser - RLS should work correctly';
              END IF;
          END \$rls_fix\$;
          
          -- Verify RLS is working
          SELECT 'RLS enabled: ' || pg_class.relrowsecurity 
          FROM pg_class 
          WHERE relname = 'engagement_events';
          
          -- Verify policies exist
          SELECT 'Policies created: ' || COUNT(*) 
          FROM pg_policies 
          WHERE tablename = 'engagement_events';
          
          -- Show postgres user type for debugging
          SELECT 'postgres user type: ' || 
                 CASE WHEN rolsuper THEN 'SUPERUSER (will use rls_test_user)' 
                      ELSE 'Regular user (RLS enforced)' 
                 END
          FROM pg_authid 
          WHERE rolname = 'postgres';
          "

      # actionlint-disable-next-line expression-env
      - name: Run RLS & Audit Tests
        if: ${{ env.ACT != 'true' }}
        env:
          DB_HOST: postgres
          DB_PORT: '5432'
          DB_NAME: test
          DB_USER: rls_test_user
          DB_PASSWORD: postgres
        run: |
          pytest tests/db/ -q

      # actionlint-disable-next-line expression-env
      - name: Verify Onboarding Migration Rollback
        if: ${{ env.ACT != 'true' }}
        env:
          DB_HOST: postgres
          DB_PORT: '5432'
          DB_NAME: test
          DB_USER: postgres
          DB_PASSWORD: postgres
        run: |
          echo "üîÑ Verifying onboarding migration rollback..."
          pytest tests/db/test_migration_rollback.py -q
          echo "‚úÖ Rollback verification complete"

      # ---------- Component Size Audit Report ---------- 
      - name: Generate Component Size Audit Report
        if: github.event_name == 'pull_request'
        run: |
          chmod +x scripts/component_size_audit.sh
          ./scripts/component_size_audit.sh --output-file component_size_pr_report.md
        
      - name: Upload Component Size Report
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4.3.0
        with:
          name: component-size-report
          path: component_size_pr_report.md
          retention-days: 30
          
      - name: Comment Component Size Report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the component size report
            let report = '';
            try {
              report = fs.readFileSync('component_size_pr_report.md', 'utf8');
            } catch (error) {
              console.log('No component size report found');
              return;
            }
            
            // Truncate report if too long for comment
            const maxLength = 65000; // GitHub comment limit
            if (report.length > maxLength) {
              report = report.substring(0, maxLength - 200) + '\n\n... (Report truncated. See full report in artifacts)';
            }
            
            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('BEE Component Size Audit Report')
            );
            
            const commentBody = `## üîç BEE Component Size Audit Report
            
            ${report}
            
            ---
            *This report is automatically generated by the component size governance system.*
            *For more details, see: \`scripts/check_component_sizes.sh\`*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      # ---------- Supabase Password Policy Enforcement & Check ----------
      - name: Enforce Supabase password policy (auto-fix drift)
        run: |
          chmod +x scripts/enforce_supabase_password_policy.sh
          ./scripts/enforce_supabase_password_policy.sh
        env:
          SUPABASE_ACCESS_TOKEN: ${{ env.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_URL: ${{ env.SUPABASE_URL }}

      - name: Verify Supabase password policy (‚â•8 chars & symbol)
        run: |
          chmod +x scripts/check_supabase_password_policy.sh
          ./scripts/check_supabase_password_policy.sh
        env:
          SUPABASE_ACCESS_TOKEN: ${{ env.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
