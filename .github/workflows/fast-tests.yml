name: Fast Tests (Pull Request)

on:
  pull_request:

jobs:
  migrations:
    runs-on: ubuntu-latest
    container: ghcr.io/gmtfrombc/ci-base:latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Apply Supabase migrations
        env:
          PGHOST: postgres
          PGUSER: postgres
          PGPASSWORD: postgres
        run: |
          for f in supabase/migrations/*.sql; do
            echo "Applying $f"
            psql -d postgres -v ON_ERROR_STOP=1 -f "$f"
          done

  fast:
    needs: migrations
    runs-on: ubuntu-latest
    container: ghcr.io/gmtfrombc/ci-base:latest
    env:
      ACT: "false"  # Overwritten by `act` locally if used
      FLUTTER_VERSION: "3.32.6"
      NODE_VERSION: "20.9.0"
      FAST_ONLY: "false"
    steps:
      - uses: actions/checkout@v4

      # ---------------- Cache Flutter build artefacts ----------------
      - name: Cache Dart & Flutter build artefacts
        uses: actions/cache@v3
        with:
          path: app/.dart_tool
          key: ${{ runner.os }}-dart-${{ hashFiles('app/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-dart-

      # ---------------- Secret Scan ----------------
      - name: Secret Scan with Gitleaks
        run: |
          chmod +x scripts/check_secrets.sh
          ./scripts/check_secrets.sh

      # ---------------- Flutter (analyze + unit) ----------------
      - name: Prepare Flutter Environment Files
        working-directory: ./app
        run: |
          # .env used by the app â€“ copy example for CI builds
          cp .env.example .env
          # Replace firebase_options.dart with CI-safe stub to avoid secrets
          cp lib/firebase_options_ci.dart lib/firebase_options.dart

      - name: Flutter Pub Get
        working-directory: ./app
        run: flutter pub get

      - name: Flutter Analyze
        working-directory: ./app
        run: flutter analyze --fatal-warnings --fatal-infos

      - name: Flutter Tests with Coverage
        working-directory: ./app
        run: flutter test --coverage --fail-fast

      # ---------------- Python (pytest) ----------------
      - name: Install Python test dependencies
        if: env.FAST_ONLY != 'true'
        run: pip install --break-system-packages -r tests/requirements-minimal.txt

      - name: Run Python Unit Tests (API only)
        if: env.FAST_ONLY != 'true'
        run: pytest -q -x tests/api

      # ---------------- Deno Lint ----------------
      - name: Deno Lint (Supabase Edge Functions)
        if: env.FAST_ONLY != 'true'
        run: deno lint supabase/functions 