name: Flutter CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Environment File
      working-directory: ./app
      run: |
        echo "ðŸ“‹ Creating .env file for Flutter asset bundling..."
        
        # Create .env.example with proper content
        echo "# Environment Configuration Template" > .env.example
        echo "# This file provides template values for GitHub builds" >> .env.example
        echo "" >> .env.example
        echo "ENVIRONMENT=development" >> .env.example
        echo "SUPABASE_URL=https://your-project.supabase.co" >> .env.example
        echo "SUPABASE_ANON_KEY=your-supabase-anon-key-here" >> .env.example
        echo "FIREBASE_PROJECT_ID=bee-mvp-3ab43" >> .env.example
        echo "APP_VERSION=1.0.0" >> .env.example
        
        # Create .env from template for CI builds
        cp .env.example .env
        
        echo "âœ… Created .env file from template"
        echo "ðŸ“‹ Verifying .env file exists:"
        ls -la .env
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        
    - name: Get dependencies
      working-directory: ./app
      run: flutter pub get
      
    - name: Verify the build
      working-directory: ./app
      run: flutter analyze
      
    - name: Run tests
      working-directory: ./app
      run: flutter test --coverage
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./app/coverage/lcov.info
        fail_ci_if_error: false

  build-android:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Environment File
      working-directory: ./app
      run: |
        echo "ðŸ“‹ Creating .env file for Flutter asset bundling..."
        
        # Create .env.example with proper content
        echo "# Environment Configuration Template" > .env.example
        echo "# This file provides template values for GitHub builds" >> .env.example
        echo "" >> .env.example
        echo "ENVIRONMENT=development" >> .env.example
        echo "SUPABASE_URL=https://your-project.supabase.co" >> .env.example
        echo "SUPABASE_ANON_KEY=your-supabase-anon-key-here" >> .env.example
        echo "FIREBASE_PROJECT_ID=bee-mvp-3ab43" >> .env.example
        echo "APP_VERSION=1.0.0" >> .env.example
        
        # Create .env from template for CI builds
        cp .env.example .env
        
        echo "âœ… Created .env file from template"
        echo "ðŸ“‹ Verifying .env file exists:"
        ls -la .env
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        
    - name: Get dependencies
      working-directory: ./app
      run: flutter pub get
      
    - name: Build APK
      working-directory: ./app
      run: flutter build apk --release
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release.apk
        path: app/build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    needs: test
    runs-on: macos-latest
    defaults: 
      run: 
        working-directory: ./app
    env:
      NEEDS_REAL_FIREBASE: false  # Set to 'true' when integration tests or TestFlight deployment needed
    
    steps:
    - uses: actions/checkout@v4
    
    # GUARD RAIL: Fail fast if someone accidentally committed real Firebase config
    - name: Ensure repository is credential-free
      run: |
        if [ -f ios/Runner/GoogleService-Info.plist ]; then
          echo "::error file=ios/Runner/GoogleService-Info.plist::Real Firebase plist must not be committed to repository"
          echo "::error::This file contains production credentials and should remain gitignored"
          echo "::error::Please remove the file and recommit without Firebase credentials"
          exit 1
        fi
        echo "âœ… Repository is credential-free - no Firebase plist found"
    
    - name: Create Environment File
      run: |
        echo "ðŸ“‹ Creating .env file for Flutter asset bundling..."
        
        # Create .env.example with proper content
        echo "# Environment Configuration Template" > .env.example
        echo "# This file provides template values for GitHub builds" >> .env.example
        echo "" >> .env.example
        echo "ENVIRONMENT=development" >> .env.example
        echo "SUPABASE_URL=https://your-project.supabase.co" >> .env.example
        echo "SUPABASE_ANON_KEY=your-supabase-anon-key-here" >> .env.example
        echo "FIREBASE_PROJECT_ID=bee-mvp-3ab43" >> .env.example
        echo "APP_VERSION=1.0.0" >> .env.example
        
        # Create .env from template for CI builds
        cp .env.example .env
        
        echo "âœ… Created .env file from template"
        
    # FIREBASE CONFIG: Dynamic creation based on CI needs
    - name: Create Firebase iOS Configuration
      run: |
        if [[ "$NEEDS_REAL_FIREBASE" == "true" && -n "$IOS_PLIST_B64" ]]; then
          echo "ðŸ”¥ Restoring real Firebase plist from GitHub Secrets"
          echo "ðŸ“‹ Use this for integration tests, TestFlight deployment, or E2E testing"
          echo "$IOS_PLIST_B64" | base64 --decode > ios/Runner/GoogleService-Info.plist
          echo "âœ… Real Firebase configuration restored"
        else
          echo "ðŸ”§ Creating CI-safe dummy Firebase plist"
          echo "ðŸ“‹ This allows iOS build to succeed without exposing production credentials"
          cat > ios/Runner/GoogleService-Info.plist <<'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>API_KEY</key>
          <string>ci-placeholder-ios-api-key</string>
          <key>GCM_SENDER_ID</key>
          <string>000000000000</string>
          <key>PLIST_VERSION</key>
          <string>1</string>
          <key>BUNDLE_ID</key>
          <string>com.momentumhealth.beemvp</string>
          <key>PROJECT_ID</key>
          <string>bee-mvp-ci-placeholder</string>
          <key>STORAGE_BUCKET</key>
          <string>bee-mvp-ci-placeholder.appspot.com</string>
          <key>IS_ADS_ENABLED</key>
          <false></false>
          <key>IS_ANALYTICS_ENABLED</key>
          <false></false>
          <key>IS_APPINVITE_ENABLED</key>
          <false></false>
          <key>IS_GCM_ENABLED</key>
          <false></false>
          <key>IS_SIGNIN_ENABLED</key>
          <false></false>
          <key>GOOGLE_APP_ID</key>
          <string>1:000000000000:ios:0000000000000000000000</string>
        </dict>
        </plist>
        EOF
          echo "âœ… CI-safe Firebase configuration created"
        fi
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build iOS
      run: flutter build ios --release --no-codesign
      
    # SECURITY CLEANUP: Always remove Firebase config to prevent artifact contamination
    - name: Scrub Firebase configuration
      if: always()
      run: |
        if [ -f ios/Runner/GoogleService-Info.plist ]; then
          echo "ðŸ§¹ Removing Firebase plist to prevent artifact contamination"
          rm -f ios/Runner/GoogleService-Info.plist
          echo "âœ… Firebase configuration scrubbed"
        fi 