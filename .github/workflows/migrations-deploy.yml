# actionlint-disable shellcheck
name: Supabase Migrations Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'supabase/migrations/**'
      - 'infra/**'
      - '.github/workflows/migrations-deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: "${{ secrets.SUPABASE_ACCESS_TOKEN }}"
      SUPABASE_PROJECT_URL: "${{ secrets.SUPABASE_URL }}"
      SUPABASE_SERVICE_ROLE_SECRET: "${{ secrets.SUPABASE_SERVICE_ROLE_SECRET }}"
      SUPABASE_PROJECT_REF: "${{ secrets.SUPABASE_PROJECT_REF }}"
      SUPABASE_DB_PASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
      SKIP_TERRAFORM: "${{ secrets.SKIP_TERRAFORM }}"
      TF_VAR_supabase_url: "${{ secrets.SUPABASE_URL }}"
      ACT: 'false'  # CI default; the local `act` runner overwrites this

    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 2.30.4  # Update to v2 CLI which supports --create-client

      - name: Verify Supabase CLI version compatibility
        run: |
          EXPECTED_VERSION="2.30.4"
          ACTUAL_VERSION=$(supabase --version | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+')
          echo "Expected Supabase CLI version: $EXPECTED_VERSION"
          echo "Actual Supabase CLI version: $ACTUAL_VERSION"
          if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "⚠️  WARNING: Supabase CLI version mismatch!"
            echo "   Expected: $EXPECTED_VERSION"
            echo "   Actual:   $ACTUAL_VERSION"
            echo "   This may cause unexpected behavior. Consider updating the pinned version."
          else
            echo "✅ Supabase CLI version matches expected version"
          fi

      - name: Load Supabase secrets into environment
        # actionlint-disable-next-line shellcheck
        run: |
          echo "SUPABASE_URL=$SUPABASE_PROJECT_URL" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_SECRET=$SUPABASE_SERVICE_ROLE_SECRET" >> $GITHUB_ENV
          echo "SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF" >> $GITHUB_ENV
          echo "SUPABASE_DB_PASSWORD=$SUPABASE_DB_PASSWORD" >> $GITHUB_ENV

      - name: Link Supabase project (GitHub only)
        if: env.ACT != 'true'
        run: |
          # Try linking with access token first (preferred method)
          if ! supabase link --project-ref "$SUPABASE_PROJECT_REF"; then
            echo "Failed to link with access token, trying with password..."
            supabase link --project-ref "$SUPABASE_PROJECT_REF" --password "$SUPABASE_DB_PASSWORD"
          fi

      - name: Apply pending migrations (GitHub only)
        if: env.ACT != 'true'
        run: |
          # Apply migrations with proper error handling
          if ! supabase db push --include-all; then
            echo "Failed to push migrations without password, trying with password..."
            supabase db push --include-all --password "$SUPABASE_DB_PASSWORD"
          fi

      - name: Configure Google credentials & set TF_VAR_gcp_project (GitHub only)
        if: env.SKIP_TERRAFORM != 'true' && env.ACT != 'true'
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        # actionlint-disable-next-line shellcheck
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          if [ -n "$GCP_SA_KEY" ]; then
            echo "$GCP_SA_KEY" | base64 -d > /tmp/sa.json
            echo "::add-mask::$GCP_SA_KEY"
            PROJECT_ID=$(cat /tmp/sa.json | jq -r .project_id)
            echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/sa.json" >> $GITHUB_ENV
          else
            echo "GCP_SA_KEY not provided – using local-test project ID for Terraform.";
            PROJECT_ID="local-test"
          fi
          echo "Using GCP project: $PROJECT_ID"
          echo "TF_VAR_gcp_project=$PROJECT_ID" >> $GITHUB_ENV

      - name: Setup Terraform (GitHub only)
        if: env.SKIP_TERRAFORM != 'true' && env.ACT != 'true'
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init, validate & apply (GitHub only)
        if: env.SKIP_TERRAFORM != 'true' && env.ACT != 'true'
        working-directory: infra
        # actionlint-disable-next-line shellcheck
        run: |
          terraform init -backend=false
          terraform validate
          terraform apply -auto-approve -input=false

      - name: Enforce Supabase password policy (GitHub only)
        if: env.SKIP_TERRAFORM != 'true' && env.ACT != 'true'
        run: |
          supabase auth settings update \
            --password_min_length 8 \
            --password_require_special_char true 