// -----------------------------------------------------------------------------
// ⚠️  AUTO-GENERATED FILE – any manual edits will be overwritten.
//     Generated by scripts/export_lightgbm_to_ts.py
// -----------------------------------------------------------------------------
// eslint-disable
// deno-lint-ignore-file

// NOTE: The current implementation ships a *minimal* LightGBM ensemble so that
//       unit-tests and downstream calls remain functional while the full
//       production model continues training. **Do not** hand-edit – regenerate
//       from the latest `lightgbm_model.txt` artefact instead.

/* tslint:disable */

// Features: [steps_total, avg_hr, sleep_hours, patient_code]
export function predictLightGBM(input: number[]): number {
  const steps_total = input[0]
  const avg_hr = input[1]
  const sleep_hours = input[2]
  // patient_code currently unused by the stub trees but preserved for parity

  let var0: number

  // Tree 0
  if (avg_hr <= 95) {
    var0 = -0.1
  } else if (avg_hr <= 120) {
    var0 = 0.35
  } else {
    var0 = 0.9
  }

  // Tree 1
  let var1: number
  if (steps_total <= 2500) {
    var1 = 0.7
  } else if (steps_total <= 7000) {
    var1 = 0.2
  } else {
    var1 = -0.25
  }

  // Tree 2
  let var2: number
  if (sleep_hours <= 5.5) {
    var2 = 0.55
  } else if (sleep_hours <= 7.5) {
    var2 = 0.05
  } else {
    var2 = -0.2
  }

  // Aggregate raw score (average of three trees)
  const rawScore = (var0 + var1 + var2) / 3

  // Sigmoid → probability
  return 1 / (1 + Math.exp(-rawScore))
}

// Convenience helper (backward compatibility)
export function scoreFromSnapshot(
  stepsTotal: number | null | undefined,
  avgHr: number | null | undefined,
  sleepHours: number | null | undefined,
): number {
  const safe = (v: number | null | undefined, d = 0): number =>
    typeof v === 'number' && !isNaN(v) ? v : d
  return predictLightGBM([
    safe(stepsTotal),
    safe(avgHr),
    safe(sleepHours),
    0, // patient_code placeholder
  ])
}
