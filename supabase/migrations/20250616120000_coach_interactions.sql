-- Migration: create coach_interactions & interaction_events tables
-- Generated by AI assistant 2025-06-16

-- Extensions
create extension if not exists "uuid-ossp";

-- Main interaction table
create table if not exists public.coach_interactions (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid not null references auth.users(id) on delete cascade,
    sender text not null check (sender in ('user','ai','human_coach')),
    message text not null,
    metadata jsonb default '{}'::jsonb,
    created_at timestamptz not null default now()
);

comment on table public.coach_interactions is 'Log of every coaching message between user, AI and human coaches.';

create index if not exists coach_interactions_user_idx on public.coach_interactions(user_id);
create index if not exists coach_interactions_created_idx on public.coach_interactions(created_at);

-- Optional high-level events table
create table if not exists public.interaction_events (
    id uuid primary key default uuid_generate_v4(),
    interaction_id uuid not null references public.coach_interactions(id) on delete cascade,
    event_type text not null, -- e.g. delivered, read, reacted
    payload jsonb default '{}'::jsonb,
    created_at timestamptz not null default now()
);

create index if not exists interaction_events_type_idx on public.interaction_events(event_type);

-- RLS
alter table public.coach_interactions enable row level security;
alter table public.interaction_events enable row level security;

-- Policy: users can see their own rows
create policy "User can read own interactions" on public.coach_interactions
    for select using (auth.uid() = user_id);

create policy "User can read own interaction events" on public.interaction_events
    for select using (auth.uid() = (select user_id from public.coach_interactions ci where ci.id = interaction_id));

-- Service role insert/update
create policy "Service role full access interactions" on public.coach_interactions
    for all
    using (auth.role() = 'service_role')
    with check (auth.role() = 'service_role');

create policy "Service role full access events" on public.interaction_events
    for all
    using (auth.role() = 'service_role')
    with check (auth.role() = 'service_role'); 