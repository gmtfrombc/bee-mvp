#!/usr/bin/env python
"""
export_lightgbm_to_ts.py – Utility to convert a trained LightGBM model
into a self-contained TypeScript scorer using the m2cgen code-generation
library.

Usage (CI / local):

    python scripts/export_lightgbm_to_ts.py \
        --model artefacts/lightgbm_model.txt \
        --output supabase/functions/ai-coaching-engine/personalization/lightgbm_model.ts

The script is intentionally dependency-light. It only requires:
  • lightgbm
  • m2cgen>=0.10.0 (for TS backend support)

Both packages are added to requirements.txt so CI pipelines and
GitHub Actions workflows install them automatically.
"""

from __future__ import annotations

import argparse
import pathlib
import sys

# Third-party – make import errors explicit for CI logs
try:
    import lightgbm as lgb  # type: ignore
except ModuleNotFoundError as exc:  # pragma: no cover
    sys.stderr.write(
        "[export_lightgbm_to_ts] lightgbm not installed – add it to requirements.txt\n")
    raise exc

try:
    import m2cgen as m2c  # type: ignore
except ModuleNotFoundError as exc:  # pragma: no cover
    sys.stderr.write(
        "[export_lightgbm_to_ts] m2cgen not installed – add it to requirements.txt\n")
    raise exc


TS_HEADER = """// -----------------------------------------------------------------------------
// ⚠️  AUTO-GENERATED FILE – do **NOT** edit manually.
//     Generated by scripts/export_lightgbm_to_ts.py
// -----------------------------------------------------------------------------
// eslint-disable
// deno-lint-ignore-file
// -----------------------------------------------------------------------------
"""


def export(model_path: pathlib.Path, output_path: pathlib.Path) -> None:
    """Load a LightGBM model and write a TypeScript scorer file."""
    bst = lgb.Booster(model_file=str(model_path))
    # m2cgen 0.10.x introduced export_to_typescript; older versions only have export_to_javascript
    if hasattr(m2c, "export_to_typescript"):
        ts_code = m2c.export_to_typescript(bst)  # type: ignore[attr-defined]
    else:
        # Fall back to JS export; TypeScript accepts JS syntax in .ts files.
        ts_code = m2c.export_to_javascript(bst)  # type: ignore[attr-defined]

    # Prepend header & wrap in ESM export for Deno compatibility
    wrapped_code = TS_HEADER + "\n" + ts_code + \
        "\n\nexport function predictLightGBM(input: number[]): number {\n  return score(input);\n}\n"

    output_path.parent.mkdir(parents=True, exist_ok=True)
    output_path.write_text(wrapped_code, encoding="utf-8")
    print(f"[export_lightgbm_to_ts] wrote TypeScript scorer → {output_path}")


if __name__ == "__main__":  # pragma: no cover
    parser = argparse.ArgumentParser(
        description="Export LightGBM model to TypeScript scorer")
    parser.add_argument("--model", required=True,
                        help="Path to LightGBM model (txt or binary)")
    parser.add_argument(
        "--output",
        required=True,
        help="Destination .ts file (will be overwritten)",
    )

    args = parser.parse_args()
    export(pathlib.Path(args.model), pathlib.Path(args.output))
