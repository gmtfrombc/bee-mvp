# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  # Exclude generated files
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "**/generated_plugin_registrant.dart"
    - "build/**"
    - ".dart_tool/**"
  
  # Suppress environment variable warnings for CI/CD-only variables
  errors:
    # Allow missing environment variables that are only used in deployment
    invalid_annotation_target: ignore
    
  # TEMPORARILY DISABLED: These strict settings were causing sudden type errors
  # Re-enable these gradually as you fix type issues
  # language:
  #   strict-casts: true
  #   strict-inference: true
  #   strict-raw-types: true

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    
    # ==============================================================
    # COMPONENT SIZE GOVERNANCE - BEE App Architecture Guidelines
    # ==============================================================
    # These rules enforce the component size limits established in
    # docs/refactor/component_size_audit_refactor_plan.md
    # 
    # Guidelines:
    # - Services: ≤500 lines
    # - UI Components: ≤300 lines  
    # - Screen Components: ≤400 lines (special consideration)
    # - Modal Components: ≤250 lines
    # - Models: Flexible (complex data structures acceptable)
    # ==============================================================
    
    # Enable file length linting for component size governance
    # Note: Dart analyzer doesn't have native file_length rule,
    # but we enforce this through custom scripts and CI/CD
    # See: scripts/check_component_sizes.sh

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

# ==============================================================
# COMPONENT SIZE MONITORING
# ==============================================================
# Automated size checking is performed by:
#
# 1. Pre-commit hooks: .git/hooks/pre-commit
# 2. CI/CD pipeline: .github/workflows/ci.yml  
# 3. Manual auditing: scripts/check_component_sizes.sh
# 4. Weekly reporting: scripts/component_size_audit.sh
#
# For violations, see refactoring guidelines:
# docs/refactor/component_size_audit_refactor_plan.md
# ==============================================================

# ==============================================================
# TODAY FEED CACHE SERVICE MIGRATION GUIDANCE
# ==============================================================
# The Today Feed Cache Service has been refactored from a monolithic
# service to a modular architecture. Legacy methods are still supported
# for backward compatibility but will be deprecated in future releases.
#
# **MIGRATION DEADLINES:**
# - v1.9 (6 months): Deprecation warnings added
# - v2.0 (12 months): Legacy methods removed
#
# **AUTOMATED MIGRATION TOOLS:**
# Use the migration helper to scan for legacy usage:
# ```bash
# dart scripts/migration_helper.dart
# ```
#
# **LEGACY METHODS TO AVOID IN NEW CODE:**
# - TodayFeedCacheService.clearAllCache() → invalidateCache()
# - TodayFeedCacheService.getCacheStats() → getCacheMetadata()
# - TodayFeedCacheService.queueInteraction() → TodayFeedCacheSyncService.cachePendingInteraction()
# - TodayFeedCacheService.syncWhenOnline() → TodayFeedCacheSyncService.syncWhenOnline()
# - TodayFeedCacheService.selectiveCleanup() → TodayFeedCacheMaintenanceService.selectiveCleanup()
# - TodayFeedCacheService.getDiagnosticInfo() → TodayFeedCacheHealthService.getDiagnosticInfo()
# - TodayFeedCacheService.getCacheStatistics() → TodayFeedCacheStatisticsService.getCacheStatistics()
# - TodayFeedCacheService.getCacheHealthStatus() → TodayFeedCacheHealthService.getCacheHealthStatus()
# - TodayFeedCacheService.getContentHistory() → TodayFeedContentService.getContentHistory()
# - TodayFeedCacheService.invalidateContent() → TodayFeedCacheMaintenanceService.invalidateContent()
# - TodayFeedCacheService.setBackgroundSyncEnabled() → TodayFeedCacheSyncService.setBackgroundSyncEnabled()
# - TodayFeedCacheService.isBackgroundSyncEnabled() → TodayFeedCacheSyncService.isBackgroundSyncEnabled()
# - TodayFeedCacheService.markContentAsViewed() → TodayFeedCacheSyncService.markContentAsViewed()
# - TodayFeedCacheService.cachePendingInteraction() → TodayFeedCacheSyncService.cachePendingInteraction()
# - TodayFeedCacheService.getPendingInteractions() → TodayFeedCacheSyncService.getPendingInteractions()
# - TodayFeedCacheService.clearPendingInteractions() → TodayFeedCacheSyncService.clearPendingInteractions()
# - TodayFeedCacheService.getCacheInvalidationStats() → TodayFeedCacheMaintenanceService.getCacheInvalidationStats()
# - TodayFeedCacheService.exportMetricsForMonitoring() → TodayFeedCacheStatisticsService.exportMetricsForMonitoring()
# - TodayFeedCacheService.performCacheIntegrityCheck() → TodayFeedCacheHealthService.performCacheIntegrityCheck()
#
# **MIGRATION GUIDE:**
# See: docs/refactor/today_feed_cache_migration_guide.md
#
# **RECOMMENDED APPROACH FOR NEW CODE:**
# - Import specialized services directly
# - Use modern method signatures with enhanced parameters
# - Follow modular architecture patterns
# ==============================================================
