#!/bin/bash
# bee-local: launch Flutter app using the local Supabase stack started by ./supa
# -----------------------------------------------------------------------------
# 1. Expects that you have already run ./supa (which starts supabase start)
# 2. Reads SITE_URL / ANON_KEY from supabase/.env.local (created by supa or by
#    you manually) and temporarily swaps app/.env so that run_dev.sh picks up
#    local credentials.
# 3. Restores the original app/.env on exit (SIGINT, normal exit, or error).
# -----------------------------------------------------------------------------
set -euo pipefail

LOCAL_ENV="supabase/.env.local"
APP_ENV_DIR="app"
APP_ENV_FILE="${APP_ENV_DIR}/.env"
BACKUP_FILE="${APP_ENV_FILE}.backup-local"

if [ ! -f "$LOCAL_ENV" ]; then
  echo "❌ $LOCAL_ENV not found. Run ./supa first to generate local credentials." >&2
  exit 1
fi

# Extract values
SUPA_URL=$(grep -E "^(SITE_URL|SUPABASE_URL)=" "$LOCAL_ENV" | head -n1 | cut -d '=' -f2-)
ANON_KEY=$(grep -E "^(ANON_KEY|SUPABASE_ANON_KEY)=" "$LOCAL_ENV" | head -n1 | cut -d '=' -f2-)

if [ -z "$SUPA_URL" ] || [ -z "$ANON_KEY" ]; then
  echo "❌ Could not parse SITE_URL or ANON_KEY from $LOCAL_ENV" >&2
  exit 1
fi

printf "🔄 Switching app/.env to LOCAL Supabase stack (URL: %s)\n" "$SUPA_URL"

# Backup current env
cp "$APP_ENV_FILE" "$BACKUP_FILE"

cat > "$APP_ENV_FILE" <<EOF
ENVIRONMENT=development
SUPABASE_URL=$SUPA_URL
SUPABASE_ANON_KEY=$ANON_KEY
FLUTTER_ENV=development
EOF

restore_env() {
  echo "\n🛑 Stopping local run – restoring original .env"
  mv "$BACKUP_FILE" "$APP_ENV_FILE"
  echo "✅ app/.env restored"
}
trap restore_env EXIT INT TERM

# Run Flutter app (run_dev.sh handles build flags / hot reload)
./bee 