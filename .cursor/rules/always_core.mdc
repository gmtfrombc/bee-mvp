---
alwaysApply: true
---

## rule_type: always

# üß† Standard Workflow--New Task

1Ô∏è‚É£ Checkout main, insure all synced 1Ô∏è‚É£ Branch epic-<epic>/T<task>-slug off main.
2Ô∏è‚É£ Plan: Enter the BLUEPRINT phase and create a checklist giving your
step-by-step plan, wait for ‚úî from user. 3Ô∏è‚É£ Code locally, commit small chunks.
Pre-commit hook auto-runs formatter + linter + Gitleaks; aborts on conflict
markers. 4Ô∏è‚É£ Test locally ‚Ä¢ Fast path make ci-fast (~5 min) ‚Ä¢ Full matrix make
ci-local (identical to GitHub via ACT) Ôøº 5Ô∏è‚É£ Fix failures: rerun only failed
tests (flutter test --name, pytest --lf, deno test --filter) until green, then
run the full suite once. 6Ô∏è‚É£ Rebase before push git fetch origin git rebase
origin/main --autostash # surfacing fresh conflicts git push --force-with-lease
# safe overwrite 7Ô∏è‚É£ Open PR, wait for Fast Tests to pass (< 5 min), squash-merge
to main, then delete the branch. 8Ô∏è‚É£ Stop; await next user task.

# üß† Core Coding Rules

- Use **Chain-of-Thought reasoning** for complex tasks. Think aloud before
  executing.
- Create efficient code using best practices, minimizing complexity and
  maintaining a lean codebase
- Check for existing functions/services/widgets before writing new code. Avoid
  duplication.
- Never prompt the user to run terminal commands. Use `--non-interactive` flags
  if needed.
- Supabase secrets ENV file lives at `~/.bee_secrets/supabase.env`
- Use Flutter SDK **3.3.2a** with **Riverpod v2** only.
- Use `--fatal-warnings`; null-safety is enforced project-wide.

# üß† Further Reference

Further reference (open on demand): ‚Ä¢ docs/architecture/bee_mvp_tech_overview.md
‚Äì full architecture & SLAs ‚Ä¢ docs/architecture/component_governance.md ‚Äì
component size & patterns ‚Ä¢ ocs/MVP_ROADMAP/bee_project_plan_mvp_FINAL.md ‚Äì MVP
roadmap & epics

# Local DB

‚Ä¢ Tests auto-start a throw-away Postgres with scripts/start_test_db.sh (see file
for details).
