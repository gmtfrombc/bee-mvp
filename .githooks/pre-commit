#!/usr/bin/env bash
set -e

echo "🔧 Pre-commit hook starting..."

# 1. Block committing any dotenv file (.env, .env.*) but ALLOW .env.example files
blocked_files=$(git diff --cached --name-only | grep -E '\.env($|\..*$)' | grep -v '\.env\.example' || true)
if [ -n "$blocked_files" ]; then
  echo "❌  Refusing to commit .env files (contains secrets)"
  echo "💡  Note: .env.example files are allowed and safe to commit"
  echo "Blocked files:"
  echo "$blocked_files"
  exit 1
fi

# 2. Run gitleaks (if available) against staged changes to prevent committing secrets
if command -v gitleaks >/dev/null 2>&1; then
  echo "🔍  Running gitleaks scan on staged changes..."

  # Temporarily stash unstaged changes so gitleaks only scans the index
  git stash -q --keep-index

  if ! gitleaks protect --staged --redact; then
    echo '❌  Gitleaks detected potential secrets in your staged changes. Commit aborted.'
    # Restore unstaged changes before exiting
    git stash pop -q
    exit 1
  fi

  # Restore unstaged changes after successful scan
  git stash pop -q
# If gitleaks is missing, abort the commit (developers must install it)
else
  echo "❌  Gitleaks is not installed. Install it before committing. See SECURITY.md for instructions."
  exit 1
fi

echo "✅ Pre-commit hook completed successfully"

# 3. Run Black on staged Python files to ensure formatting consistency
#    This prevents CI failures where Black formatting passes locally but fails remotely.

staged_py_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)
if [[ -n "$staged_py_files" ]]; then
  echo "🎨  Checking Python formatting with Black..."
  if ! black --check $staged_py_files; then
    echo "❌  Black found formatting issues. Please run 'black <files>' and restage. Commit aborted."
    exit 1
  fi
fi

echo "✅ Python formatting verified by Black"

# 4. Run Ruff linter on staged Python files to catch unused imports, etc.
if [[ -n "$staged_py_files" ]]; then
  echo "🧐  Running Ruff lint on staged files..."
  if ! ruff check $staged_py_files; then
    echo "❌  Ruff detected lint issues. Please fix or run 'ruff check --fix'. Commit aborted."
    exit 1
  fi
fi

echo "✅ Ruff lint passed"

# 4.5 Run Python tests with ephemeral Postgres if any .py file is staged.
if git diff --cached --name-only | grep -E '\.py$' >/dev/null; then
  echo "🧪  Spinning up disposable Postgres (port 55433) & running pytest..."
  for P in 55433 60000; do
    if ! lsof -i :$P >/dev/null 2>&1; then
      TEST_PG_PORT=$P; break; fi
  done
  CONTAINER_ID=$(docker run -d --rm -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=test -p ${TEST_PG_PORT}:5432 --name ci_test_pg postgres:15)
  if [ -z "$CONTAINER_ID" ]; then
    echo "❌  Failed to start Postgres test container."; exit 1;
  fi

  # Wait for Postgres to be ready
  for i in {1..20}; do
    if docker exec ci_test_pg pg_isready -U postgres >/dev/null 2>&1; then
      break
    fi
    sleep 1
  done

  export DB_HOST=localhost
  export DB_PORT=$TEST_PG_PORT

  pytest -q
  STATUS=$?

  echo "🧹  Stopping Postgres test container"
  docker stop ci_test_pg >/dev/null

  if [ $STATUS -ne 0 ]; then
    echo "❌  Pytest failures detected. Commit aborted."
    exit 1
  fi
fi

# 5. Run Flutter analyzer on staged Dart files (app/ module)
staged_dart_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.dart$' || true)
if [[ -n "$staged_dart_files" ]]; then
  if ! command -v flutter >/dev/null 2>&1; then
    echo "❌  Flutter SDK is not installed or not in PATH. Install Flutter 3.3.2a before committing Dart code."
    exit 1
  fi

  echo "🔍  Running Flutter analyze on Dart sources..."
  pushd app >/dev/null
  if ! flutter analyze --fatal-warnings --fatal-infos; then
    echo "❌  Flutter analyze detected issues. Commit aborted."
    popd >/dev/null
    exit 1
  fi
  popd >/dev/null
fi

echo "✅ Flutter analyze passed"
echo "💡 Tip: For a quick inner loop, run 'make smart-test' (or 'make ui-goldens' after UI tweaks) before committing."
